(()=>{"use strict";var __webpack_modules__={492:()=>{eval("\n// UNUSED EXPORTS: addCard\n\n;// CONCATENATED MODULE: ./src/scripts/api.js\nconst BASE_URL = 'https://nomoreparties.co/v1/wff-cohort-9';\nconst getOptions = {\n  headers: {\n    authorization: 'f8c1f4d7-8688-4c9f-adde-6b534a3a7e9a',\n    'Content-Type': 'application/json'\n  }\n};\nfunction getUser() {\n  return fetch(BASE_URL + '/users/me', getOptions).then(handleResponse).catch(handleCatch);\n}\nfunction getCards() {\n  return fetch(BASE_URL + '/cards', getOptions).then(handleResponse).catch(handleCatch);\n}\nfunction postCards(card) {\n  return fetch(BASE_URL + '/cards', {\n    method: 'POST',\n    headers: getOptions.headers,\n    body: JSON.stringify({\n      name: card.name,\n      link: card.link\n    })\n  }).then(handleResponse).catch(handleCatch);\n}\nfunction deleteCards(cardId) {\n  return fetch(BASE_URL + \"/cards/\" + `${cardId}`, {\n    method: \"DELETE\",\n    headers: getOptions.headers\n  }).then(handleResponse).catch(handleCatch);\n}\nfunction upgradeUser(user) {\n  return fetch(BASE_URL + \"/users/me\", {\n    method: \"PATCH\",\n    headers: getOptions.headers,\n    body: JSON.stringify({\n      name: user.name,\n      about: user.about\n    })\n  }).then(handleResponse).catch(handleCatch);\n}\nfunction likeCards(cardId) {\n  return fetch(BASE_URL + \"/cards/likes/\" + `${cardId}`, {\n    method: \"PUT\",\n    headers: getOptions.headers\n  }).then(handleResponse).catch(handleCatch);\n}\nfunction unlikeCards(cardId) {\n  return fetch(BASE_URL + \"/cards/likes/\" + `${cardId}`, {\n    method: \"DELETE\",\n    headers: getOptions.headers\n  }).then(handleResponse).catch(handleCatch);\n}\nfunction upgradeAvatar(user) {\n  return fetch(BASE_URL + \"/users/me/avatar\", {\n    method: \"PATCH\",\n    headers: getOptions.headers,\n    body: JSON.stringify({\n      avatar: user.avatar\n    })\n  }).then(handleResponse).catch(handleCatch);\n}\nfunction handleResponse(response) {\n  if (response.ok) {\n    return response.json();\n  }\n  return Promise.reject(`Ошибка: ${response.status}`);\n}\nfunction handleCatch(err) {\n  return console.log(`Ошибка: ${err}`);\n}\n;// CONCATENATED MODULE: ./src/scripts/card.js\n\nfunction createCard(initialCard, openTypeDeleteCard, likeButton, openTypeImageModal, id) {\n  const cardTemplate = document.querySelector('#card-template').content;\n  const placesItem = cardTemplate.querySelector('.places__item').cloneNode(true);\n  const cardTitle = placesItem.querySelector('.card__title');\n  const cardDeleteButton = placesItem.querySelector('.card__delete-button');\n  const cardLikeButton = placesItem.querySelector('.card__like-button');\n  const cardImage = placesItem.querySelector('.card__image');\n  const cardLike = placesItem.querySelector('.card__like');\n  cardImage.src = initialCard.link;\n  cardImage.alt = initialCard.name;\n  cardTitle.textContent = initialCard.name;\n  cardLike.textContent = initialCard.likes.length;\n  initialCard.likes.forEach(item => {\n    if (item['_id'] === id) {\n      cardLikeButton.classList.add('card__like-button_is-active');\n    }\n  });\n  if (initialCard.owner['_id'] != id) {\n    cardDeleteButton.style.display = 'none';\n  } else {\n    cardDeleteButton.style.display = 'block';\n  }\n  cardDeleteButton.addEventListener('click', () => {\n    openTypeDeleteCard(initialCard['_id'], placesItem);\n  });\n  cardLikeButton.addEventListener('click', () => {\n    likeButton(placesItem, initialCard['_id'], initialCard.owner['_id']);\n  });\n  cardImage.addEventListener('click', openTypeImageModal);\n  return placesItem;\n}\nconst likeCard = async (placesItem, id, ownerId) => {\n  const cardLike = placesItem.querySelector('.card__like');\n  const cardLikeButton = placesItem.querySelector('.card__like-button');\n  if (cardLikeButton.classList.contains('card__like-button_is-active')) {\n    await unlikeCards(id).then(res => {\n      cardLike.textContent = res.likes.length;\n      cardLikeButton.classList.toggle('card__like-button_is-active');\n    });\n  } else {\n    await likeCards(id).then(res => {\n      cardLike.textContent = res.likes.length;\n      cardLikeButton.classList.toggle('card__like-button_is-active');\n    });\n  }\n};\n;// CONCATENATED MODULE: ./src/scripts/modal.js\nfunction openModal(element) {\n  element.classList.add('popup_is-opened');\n  document.addEventListener('keydown', closeModalWithEsc);\n  element.addEventListener('click', closeModalOverlay);\n}\nfunction closeModal(element) {\n  element.classList.remove('popup_is-opened');\n  document.removeEventListener('keydown', closeModalWithEsc);\n  element.removeEventListener('click', closeModalOverlay);\n}\nfunction closeModalOverlay(evt) {\n  if (evt.target.classList.contains('popup_is-opened')) {\n    closeModal(evt.target);\n  }\n}\nfunction closeModalWithEsc(evt) {\n  if (evt.key === 'Escape') {\n    const popupIsOpened = document.querySelector('.popup_is-opened');\n    closeModal(popupIsOpened);\n  }\n}\n;// CONCATENATED MODULE: ./src/scripts/validation.js\nconst enableValidation = validationConfig => {\n  const popupFormList = Array.from(document.querySelectorAll(validationConfig.formSelector));\n  popupFormList.forEach(popupFormElement => {\n    popupFormElement.addEventListener('submit', function (evt) {\n      evt.preventDefault();\n    });\n    setEventListeners(popupFormElement, validationConfig.inputSelector, validationConfig.inputErrorClass, validationConfig.errorClass, validationConfig.submitButtonSelector, validationConfig.inactiveButtonClass);\n  });\n};\nfunction setEventListeners(popupFormElement, inputSelector, inputErrorClass, errorClass, submitButtonSelector, inactiveButtonClass) {\n  const popupInputList = Array.from(popupFormElement.querySelectorAll(inputSelector));\n  const buttonElement = popupFormElement.querySelector(submitButtonSelector);\n  toggleButtonState(popupInputList, buttonElement, inactiveButtonClass);\n  popupInputList.forEach(inputElement => {\n    inputElement.addEventListener(\"input\", () => {\n      checkInputValidity(popupFormElement, inputElement, inputErrorClass, errorClass);\n      toggleButtonState(popupInputList, buttonElement, inactiveButtonClass);\n    });\n  });\n}\n;\nconst checkInputValidity = (popupFormElement, inputElement, inputErrorClass, errorClass) => {\n  if (inputElement.validity.patternMismatch) {\n    inputElement.setCustomValidity(inputElement.dataset.errorMessage);\n  } else {\n    inputElement.setCustomValidity(\"\");\n  }\n  if (!inputElement.validity.valid) {\n    showInputError(popupFormElement, inputElement, inputElement.validationMessage, inputErrorClass, errorClass);\n  } else {\n    hideInputError(popupFormElement, inputElement, inputErrorClass, errorClass);\n  }\n};\nconst toggleButtonState = (popupInputList, buttonElement, inactiveButtonClass) => {\n  if (hasInvalidInput(popupInputList)) {\n    buttonElement.disabled = true;\n    buttonElement.classList.add(inactiveButtonClass);\n  } else {\n    buttonElement.disabled = false;\n    buttonElement.classList.remove(inactiveButtonClass);\n  }\n};\nconst hasInvalidInput = popupFormList => {\n  return popupFormList.some(inputElement => {\n    return !inputElement.validity.valid;\n  });\n};\nconst showInputError = (popupFormElement, inputElement, errorMessage, inputErrorClass, errorClass) => {\n  const errorElement = popupFormElement.querySelector(`.${inputElement.id}-error`);\n  inputElement.classList.add(inputErrorClass);\n  errorElement.textContent = errorMessage;\n  errorElement.classList.add(errorClass);\n};\nconst hideInputError = (popupFormElement, inputElement, inputErrorClass, errorClass) => {\n  const errorElement = popupFormElement.querySelector(`.${inputElement.id}-error`);\n  inputElement.classList.remove(inputErrorClass);\n  errorElement.classList.remove(errorClass);\n  errorElement.textContent = '';\n};\nfunction clearValidation(popupFormElement, validationConfig) {\n  const popupInputList = Array.from(popupFormElement.querySelectorAll(validationConfig.inputSelector));\n  const buttonElement = popupFormElement.querySelector(validationConfig.submitButtonSelector);\n  popupInputList.forEach(inputElement => {\n    hideInputError(popupFormElement, inputElement, validationConfig.inputErrorClass, validationConfig.errorClass);\n  });\n  buttonElement.classList.add(validationConfig.inactiveButtonClass);\n}\n;\n;// CONCATENATED MODULE: ./src/index.js\n\n\n\n\n\nconst placesList = document.querySelector('.places__list');\nconst popupTypeImage = document.querySelector('.popup_type_image');\nconst popupImage = document.querySelector('.popup__image');\nconst profileImageButton = document.querySelector('.profile__image-button');\nconst profileEditButton = document.querySelector('.profile__edit-button');\nconst profileAddButton = document.querySelector('.profile__add-button');\nconst popupTypeEdit = document.querySelector('.popup_type_edit');\nconst popupTypeNewCard = document.querySelector('.popup_type_new-card');\nconst popupTypeDelete = document.querySelector('.popup_type_delete');\nconst popupsClose = document.querySelectorAll('.popup__close');\nconst profileTitle = document.querySelector('.profile__title');\nconst popupTypeAvatar = document.querySelector('.popup_type_avatar');\nconst profileImage = document.querySelector('.profile__image');\nconst profileDescription = document.querySelector('.profile__description');\nconst popupCaption = popupTypeImage.querySelector('.popup__caption');\nconst editProfile = document.forms.namedItem('edit-profile');\nconst deleteCardForm = document.forms.namedItem('delete-card');\nconst editAvatar = document.forms.namedItem('edit-avatar');\nconst nameLink = editAvatar.elements.link;\nconst nameInput = editProfile.elements.name;\nconst descriptionInput = editProfile.elements.description;\nconst newPlace = document.forms.namedItem('new-place');\nconst placeNameInput = newPlace.elements.namedItem('place-name');\nconst linkInput = newPlace.elements.link;\nconst validationConfig = {\n  formSelector: '.popup__form',\n  inputSelector: '.popup__input',\n  submitButtonSelector: '.popup__button',\n  inactiveButtonClass: 'button_inactive',\n  inputErrorClass: 'popup__input_type_error',\n  errorClass: 'popup__input-error_active'\n};\nconst promises = [getUser(), getCards()];\nlet id = null;\nPromise.all(promises).then(([user, cards]) => {\n  profileTitle.textContent = user.name;\n  profileDescription.textContent = user.about;\n  profileImage.style.backgroundImage = `url(${user.avatar})`;\n  id = user['_id'];\n  cards.forEach(initialCard => {\n    addCard(initialCard, placesList, id);\n  });\n}).catch(console.error);\nfunction addCard(initialCard, placesList, id, addType = 'append') {\n  const placesItem = createCard(initialCard, openTypeDeleteCard, likeCard, openTypeImageModal, id);\n  if (addType === 'append') {\n    placesList.append(placesItem);\n  } else {\n    placesList.prepend(placesItem);\n  }\n}\nprofileImageButton.addEventListener('click', handleImageButton);\nasync function handleImageButton(evt) {\n  openModal(popupTypeAvatar);\n}\neditAvatar.addEventListener('submit', handleEditAvatar);\nasync function handleEditAvatar(evt) {\n  const popupButton = evt.target.querySelector('.popup__button');\n  popupButton.textContent = 'Сохранение...';\n  const user = {\n    avatar: nameLink.value\n  };\n  await upgradeAvatar(user).then(res => {\n    profileImage.style.backgroundImage = `url(${res.avatar})`;\n  });\n  closeModal(popupTypeAvatar);\n  editAvatar.reset();\n  popupButton.textContent = 'Сохранение';\n}\nprofileEditButton.addEventListener('click', function () {\n  nameInput.value = profileTitle.textContent;\n  descriptionInput.value = profileDescription.textContent;\n  clearValidation(editProfile, validationConfig);\n  openModal(popupTypeEdit);\n});\neditProfile.addEventListener('submit', handleTypeEditFormSubmit);\nasync function handleTypeEditFormSubmit(evt) {\n  evt.preventDefault();\n  const popupButton = evt.target.querySelector('.popup__button');\n  popupButton.textContent = 'Сохранение...';\n  const user = {\n    name: nameInput.value,\n    about: descriptionInput.value\n  };\n  await upgradeUser(user).then(res => {\n    profileTitle.textContent = res.name;\n    profileDescription.textContent = res.about;\n  });\n  closeModal(popupTypeEdit);\n  popupButton.textContent = 'Сохранение';\n}\nprofileAddButton.addEventListener('click', function () {\n  clearValidation(newPlace, validationConfig);\n  openModal(popupTypeNewCard);\n});\nnewPlace.addEventListener('submit', handleTypeNewCardFormSubmit);\nasync function handleTypeNewCardFormSubmit(evt) {\n  evt.preventDefault();\n  const popupButton = evt.target.querySelector('.popup__button');\n  popupButton.textContent = 'Сохранение...';\n  const card = {\n    name: placeNameInput.value,\n    link: linkInput.value\n  };\n  await postCards(card);\n  closeModal(popupTypeNewCard);\n  newPlace.reset();\n  popupButton.textContent = 'Сохранение';\n}\nlet cardForDeleteId = null;\nlet cardForDelete = null;\nconst openTypeDeleteCard = (initialCardId, placesItem) => {\n  cardForDeleteId = initialCardId;\n  cardForDelete = placesItem;\n  openModal(popupTypeDelete);\n};\ndeleteCardForm.addEventListener('submit', handleDeleteCard);\nasync function handleDeleteCard(evt) {\n  evt.preventDefault();\n  const cardId = cardForDeleteId;\n  const card = cardForDelete;\n  deleteCards(cardId).then(() => {\n    card.remove();\n    closeModal(popupTypeDelete);\n  }).catch(() => {\n    console.log('Ошибка. Запрос не выполнен');\n  }).finally(() => {\n    cardForDeleteId = null;\n  });\n}\nfunction openTypeImageModal(evt) {\n  popupImage.src = evt.target.src;\n  popupImage.alt = evt.target.alt;\n  popupCaption.textContent = evt.target.alt;\n  openModal(popupTypeImage);\n}\npopupsClose.forEach(item => {\n  item.addEventListener('click', function (evt) {\n    closeModal(evt.target.closest('.popup'));\n  });\n});\nenableValidation(validationConfig);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///492\n")}},__webpack_exports__={};__webpack_modules__[492]()})();